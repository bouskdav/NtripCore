using System;
using System.Collections.Generic;
using System.Globalization;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace NtripCore.Caster.Utility.Sources
{
    public class NtripStrRecord
    {
        private readonly string _record;

        private readonly string _type;
        private readonly string _mountpoint;
        private readonly string _identifier;
        private readonly string _format;
        private readonly string _formatDetails;
        private readonly string _carrier;
        private readonly string _navSystem;
        private readonly string _network;
        private readonly string _country;
        private readonly string _latitude;
        private readonly string _longitude;
        private readonly string _nmea;
        private readonly string _solution;
        private readonly string _generator;
        private readonly string _compression;
        private readonly string _authentication;
        private readonly string _fee;
        private readonly string _bitrate;
        private readonly string _misc;

        private double _lat;
        private double _lon;

        public NtripStrRecord(string record) 
        {
            _record = record;

            var fields = record.Split(";");

            _type = fields[0];
            _mountpoint = fields[1];
            _identifier = fields[2];
            _format = fields[3];
            _formatDetails = fields[4];
            _carrier = fields[5];
            _navSystem = fields[6];
            _network = fields[7];
            _country = fields[8];
            _latitude = fields[9];
            _longitude = fields[10];
            _nmea = fields[11];
            _solution = fields[12];
            _generator = fields[13];
            _compression = fields[14];
            _authentication = fields[15];
            _fee = fields[16];
            _bitrate = fields[17];
            _misc = fields[18];

            _lat = double.Parse(fields[9], CultureInfo.InvariantCulture);
            _lon = double.Parse(fields[10], CultureInfo.InvariantCulture);
        }

        /// <summary>
        /// Create STR record from parameters
        /// </summary>
        /// <param name="mountpoint">Datastream mountpoint	Max. 100 characters A-Z, a-z, 0-9, -, _, .</param>
        /// <param name="identifier">Source identifier (most time nearest city)	Text</param>
        /// <param name="format">Data format (see data formats table below)	Text</param>
        /// <param name="formatDetails">Specifics of data format (see data formats table below)	Text</param>
        /// <param name="carrier">Phase information (see carrier table below)	Number</param>
        /// <param name="navSystem">Navigation System (see navigation systems table below)	Text</param>
        /// <param name="network">network name (see NET description)	Text</param>
        /// <param name="country">ISO 3166 country code (see ​Wikipedia)	3 characters</param>
        /// <param name="latitude">Position, Latitude in degree	decimal number, two digits after dot</param>
        /// <param name="longitude">Position, Longitude in degree	decimal number, two digits after dot</param>
        /// <param name="nmea">Caster requires NMEA input (1) or not (0)	Content: 1 or 0</param>
        /// <param name="solution">Generated by single base (0) or network (1)	Content: 1 or 0</param>
        /// <param name="generator">Generating soft- or hardware	Text</param>
        /// <param name="compression">Compression algorithm	Text</param>
        /// <param name="authentication">Authentication - N(one), B(asic), D(igest)</param>
        /// <param name="fee">User fee for data access: yes (Y) or no (N)	Content: Y or N</param>
        /// <param name="bitrate">Datarate in bits per second	Number</param>
        /// <param name="misc">Miscellaneous information	Text</param>
        public NtripStrRecord(string mountpoint, string identifier, string format, string formatDetails, string carrier, string navSystem, string network, string country, string latitude, string longitude, string nmea, string solution, string generator, string compression, string authentication, string fee, string bitrate, string misc)
        {
            _type = "STR";
            _mountpoint = mountpoint;
            _identifier = identifier;
            _format = format;
            _formatDetails = formatDetails;
            _carrier = carrier;
            _navSystem = navSystem;
            _network = network;
            _country = country;
            _latitude = latitude;
            _longitude = longitude;
            _nmea = nmea;
            _solution = solution;
            _generator = generator;
            _compression = compression;
            _authentication = authentication;
            _fee = fee;
            _bitrate = bitrate;
            _misc = misc;

            _lat = double.Parse(latitude);
            _lon = double.Parse(longitude);
        }

        public string Mountpoint => _mountpoint;

        public double Latitude => _lat;

        public double Longitude => _lon;

        public string OriginalString => _record;

        public string GenerateSourceTableString() => String.Join(";", _type, _mountpoint, _identifier, _format, _formatDetails, _carrier, _navSystem, _network, _country, _latitude, _longitude, _nmea, _solution, _generator, _compression, _authentication, _fee, _bitrate, _misc);
    }
}
